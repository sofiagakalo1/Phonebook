{"version":3,"file":"static/js/566.1238ae4e.chunk.js","mappings":"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","sources":["hooks/useForm.js","components/Forms/LoginForm/fields.js","components/Forms/LoginForm/initialState.js","webpack://phonebook/./src/components/Forms/LoginForm/LoginForm.module.scss?3f29","components/Forms/LoginForm/LoginForm.jsx","pages/LoginPage.jsx","webpack://phonebook/./src/shared/TextField/TextField.module.scss?8ef0","shared/TextField/TextFiled.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState } from 'react';\n\n// import css from './contactsForm.module.css';\n\nconst useForm = ({ initialState, onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = event => {\n    setState(prevState => {\n      const { name, value } = event.target;\n      return { ...prevState, [name]: value };\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit({ ...state });\n    // setState({ ...initialState });\n  };\n\n  return { state, setState, handleChange, handleSubmit };\n};\n\nexport default useForm;\n","const fields = {\n  email: {\n    type: 'email',\n    name: 'email',\n    required: true,\n    placeholder: 'Enter email',\n    autoComplete: 'off',\n  },\n  password: {\n    name: 'password',\n    required: true,\n    placeholder: 'Enter password',\n    autoComplete: 'off',\n  },\n};\n\nexport default fields;\n","const initialState = {\n  email: '',\n  password: '',\n};\n\nexport default initialState;\n","// extracted by mini-css-extract-plugin\nexport default {\"block\":\"LoginForm_block__0K6Pu\",\"form\":\"LoginForm_form__lJ12r\",\"h1\":\"LoginForm_h1__If0cu\",\"fields\":\"LoginForm_fields__rCfAs\",\"inputContainer\":\"LoginForm_inputContainer__LG515\",\"passwordToggle\":\"LoginForm_passwordToggle__2hmhI\"};","import React, { useState } from \"react\";\n\nimport useForm from \"../../../hooks/useForm.js\";\n\nimport TextField from \"../../../shared/TextField/TextFiled\";\nimport Icon from \"../../../shared/Icon/Icon\";\nimport Button from \"../../../shared/Button/Button.jsx\";\n\nimport fields from \"./fields\";\nimport initialState from \"./initialState\";\n\nimport css from \"./LoginForm.module.scss\";\n\nconst LoginForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n  const { email, password } = state;\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const togglePasswordVisibility = () => {\n    setPasswordVisible((prevState) => !prevState);\n  };\n\n  return (\n    <div className={css.block}>\n      <form onSubmit={handleSubmit} className={css.form}>\n        <h1 className={css.h1}>Authorization</h1>\n        <div className={css.fields}>\n          <TextField\n            value={email}\n            IconFieldLeft={true}\n            handleChange={handleChange}\n            inputStyle={{ minWidth: \"300px\" }}\n            {...fields.email}\n          >\n            <Icon id=\"email\" f=\"var(--icon-color)\" h=\"24\" w=\"24\" />\n          </TextField>\n          <div className={css.inputContainer}>\n            <TextField\n              type={passwordVisible ? \"text\" : \"password\"}\n              value={password}\n              handleChange={handleChange}\n              IconFieldLeft={true}\n              inputStyle={{ paddingRight: \"50px\", minWidth: \"300px\" }}\n              {...fields.password}\n            >\n              <Icon id=\"key\" sw=\"15\" h=\"24\" w=\"24\" />\n            </TextField>\n            <button\n              type=\"button\"\n              className={css.passwordToggle}\n              onClick={togglePasswordVisibility}\n            >\n              {passwordVisible ? (\n                <Icon id=\"eye-open\" h=\"24\" w=\"24\" />\n              ) : (\n                <Icon id=\"eye-closed\" h=\"24\" w=\"24\" />\n              )}\n            </button>\n          </div>\n        </div>\n        <Button\n          type=\"submit\"\n          text=\"Login\"\n          buttonStyle={{\n            padding: \"5px 20px\",\n            fontSize: \"16px\",\n          }}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { fetchLogin } from \"../redux/auth/auth-operations\";\n\nimport LoginForm from \"../components/Forms/LoginForm/LoginForm\";\n\nconst LoginPage = () => {\n  const dispatch = useDispatch();\n\n  const handleLogin = (userData) => {\n    dispatch(fetchLogin(userData));\n  };\n\n  return (\n    <div>\n      <LoginForm onSubmit={handleLogin} />\n    </div>\n  );\n};\n\nexport default LoginPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"formInput\":\"TextField_formInput__MhMqB\",\"iconLabel\":\"TextField_iconLabel__-odzf\",\"inputIconRight\":\"TextField_inputIconRight__Alp7+\",\"inputIconLeft\":\"TextField_inputIconLeft__aXH+3\",\"inputField\":\"TextField_inputField__az1oK\",\"label\":\"TextField_label__ApXO4\",\"inputIconFieldRight\":\"TextField_inputIconFieldRight__2IR0K\",\"inputIconFieldLeft\":\"TextField_inputIconFieldLeft__rFRC1\"};","import { nanoid } from 'nanoid';\nimport { useMemo } from 'react';\nimport css from './TextField.module.scss';\n\nconst TextField = ({\n  label,\n  handleChange,\n  labelStyle,\n  inputStyle,\n  divStyle,\n  IconFieldRight,\n  IconFieldLeft,\n  children,\n  ...props\n}) => {\n  const id = useMemo(() => nanoid(), []);\n\n  const fieldClassName = `${css.inputField} ${\n    IconFieldRight && css.inputIconFieldRight\n  } ${IconFieldLeft && css.inputIconFieldLeft}`;\n\n  if (IconFieldRight || IconFieldLeft) {\n    return (\n      <div className={css.formInput} style={divStyle}>\n        <label htmlFor={id} className={css.iconLabel}>\n          <input\n            id={id}\n            onChange={handleChange}\n            {...props}\n            style={inputStyle}\n            className={fieldClassName}\n          />\n          {IconFieldRight && (\n            <span className={css.inputIconRight}>{children}</span>\n          )}\n          {IconFieldLeft && (\n            <span className={css.inputIconLeft}>{children}</span>\n          )}\n        </label>\n      </div>\n    );\n  }\n\n  return (\n    <div className={css.formInput} style={divStyle}>\n      <label htmlFor={id} className={css.label} style={labelStyle}>\n        {label}\n      </label>\n      <input\n        id={id}\n        onChange={handleChange}\n        {...props}\n        style={inputStyle}\n        className={css.inputField}\n      />\n    </div>\n  );\n};\n\nexport default TextField;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["_ref","initialState","onSubmit","_useState","useState","_objectSpread","_useState2","_slicedToArray","state","setState","handleChange","event","prevState","_event$target","target","name","value","_defineProperty","handleSubmit","preventDefault","email","type","required","placeholder","autoComplete","password","_useForm","useForm","passwordVisible","setPasswordVisible","_jsx","className","css","children","_jsxs","TextField","IconFieldLeft","inputStyle","minWidth","fields","Icon","id","f","h","w","paddingRight","sw","onClick","Button","text","buttonStyle","padding","fontSize","dispatch","useDispatch","LoginForm","userData","fetchLogin","label","labelStyle","divStyle","IconFieldRight","props","_objectWithoutProperties","_excluded","useMemo","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","fieldClassName","concat","style","htmlFor","onChange"],"sourceRoot":""}