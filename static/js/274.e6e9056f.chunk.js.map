{"version":3,"file":"static/js/274.e6e9056f.chunk.js","mappings":"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","sources":["components/Forms/RegisterForm/fields.js","components/Forms/RegisterForm/initialState.js","webpack://phonebook/./src/components/Forms/RegisterForm/RegisterForm.module.scss?b1e9","components/Forms/RegisterForm/RegistrerForm.jsx","pages/RegisterPage.jsx","webpack://phonebook/./src/shared/TextField/TextField.module.scss?8ef0","shared/TextField/TextFiled.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["const fields = {\n  name: {\n    type: 'text',\n    name: 'name',\n    required: true,\n    placeholder: 'Enter name',\n  },\n  email: {\n    type: 'email',\n    name: 'email',\n    required: true,\n    placeholder: 'Enter email',\n  },\n  password: {\n    name: 'password',\n    required: true,\n    placeholder: 'Enter password',\n  },\n};\n\nexport default fields;\n","const initialState = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport default initialState;\n","// extracted by mini-css-extract-plugin\nexport default {\"block\":\"RegisterForm_block__Wi06W\",\"form\":\"RegisterForm_form__P6YFI\",\"h1\":\"RegisterForm_h1__qFxN0\",\"fields\":\"RegisterForm_fields__3JEXo\",\"inputContainer\":\"RegisterForm_inputContainer__gqLHU\",\"passwordToggle\":\"RegisterForm_passwordToggle__CdNXs\"};","import React, { useState } from \"react\";\nimport { toast } from \"react-toastify\";\n\nimport TextField from \"../../../shared/TextField/TextFiled\";\nimport Icon from \"../../../shared/Icon/Icon\";\nimport Button from \"../../../shared/Button\";\n\nimport fields from \"./fields\";\nimport initialState from \"./initialState\";\nimport css from \"./RegisterForm.module.scss\";\n\nconst RegisterForm = ({ onSubmit }) => {\n  const [user, setUser] = useState(initialState);\n  const [passwordVisible, setPasswordVisible] = useState(false);\n\n  const togglePasswordVisibility = () => {\n    setPasswordVisible((prevState) => !prevState);\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setUser((prevUser) => ({ ...prevUser, [name]: value }));\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (user.password.length < 7) {\n      return toast.error(\"Password must be at least 7 characters long\");\n    }\n    onSubmit(user);\n    toast.success(\"Registration is successfull!\");\n  };\n\n  return (\n    <div className={css.block}>\n      <form onSubmit={handleSubmit} className={css.form}>\n        <h1 className={css.h1}>Registration</h1>\n        <div className={css.fields}>\n          <TextField\n            value={user.name}\n            onChange={handleChange}\n            {...fields.name}\n            IconFieldLeft={true}\n            inputStyle={{ minWidth: \"300px\" }}\n          >\n            <Icon id=\"name\" h=\"24\" w=\"24\" />\n          </TextField>\n          <TextField\n            value={user.email}\n            onChange={handleChange}\n            {...fields.email}\n            IconFieldLeft={true}\n            inputStyle={{ minWidth: \"300px\" }}\n          >\n            <Icon id=\"email\" f=\"var(--icon-color)\" h=\"24\" w=\"24\" />\n          </TextField>\n          <div className={css.inputContainer}>\n            <TextField\n              type={passwordVisible ? \"text\" : \"password\"}\n              value={user.password}\n              handleChange={handleChange}\n              IconFieldLeft={true}\n              inputStyle={{ minWidth: \"300px\" }}\n              {...fields.password}\n            >\n              <Icon id=\"key\" sw=\"15\" h=\"24\" w=\"24\" />\n            </TextField>\n            <button\n              type=\"button\"\n              className={css.passwordToggle}\n              onClick={togglePasswordVisibility}\n            >\n              {passwordVisible ? (\n                <Icon id=\"eye-open\" h=\"24\" w=\"24\" />\n              ) : (\n                <Icon id=\"eye-closed\" h=\"24\" w=\"24\" />\n              )}\n            </button>\n          </div>\n        </div>\n        <Button\n          type=\"submit\"\n          text=\"Register\"\n          buttonStyle={{\n            padding: \"5px 20px\",\n            fontSize: \"16px\",\n          }}\n        />\n      </form>\n    </div>\n  );\n};\nexport default RegisterForm;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { fetchSignup } from \"../redux/auth/auth-operations\";\n\nimport RegisterForm from \"../components/Forms/RegisterForm/RegistrerForm\";\n\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n\n  const handleSignup = (userData) => {\n    dispatch(fetchSignup(userData));\n  };\n\n  return (\n    <div>\n      <RegisterForm onSubmit={handleSignup} />\n    </div>\n  );\n};\n\nexport default RegisterPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"formInput\":\"TextField_formInput__MhMqB\",\"iconLabel\":\"TextField_iconLabel__-odzf\",\"inputIconRight\":\"TextField_inputIconRight__Alp7+\",\"inputIconLeft\":\"TextField_inputIconLeft__aXH+3\",\"inputField\":\"TextField_inputField__az1oK\",\"label\":\"TextField_label__ApXO4\",\"inputIconFieldRight\":\"TextField_inputIconFieldRight__2IR0K\",\"inputIconFieldLeft\":\"TextField_inputIconFieldLeft__rFRC1\"};","import { nanoid } from 'nanoid';\nimport { useMemo } from 'react';\nimport css from './TextField.module.scss';\n\nconst TextField = ({\n  label,\n  handleChange,\n  labelStyle,\n  inputStyle,\n  divStyle,\n  IconFieldRight,\n  IconFieldLeft,\n  children,\n  ...props\n}) => {\n  const id = useMemo(() => nanoid(), []);\n\n  const fieldClassName = `${css.inputField} ${\n    IconFieldRight && css.inputIconFieldRight\n  } ${IconFieldLeft && css.inputIconFieldLeft}`;\n\n  if (IconFieldRight || IconFieldLeft) {\n    return (\n      <div className={css.formInput} style={divStyle}>\n        <label htmlFor={id} className={css.iconLabel}>\n          <input\n            id={id}\n            onChange={handleChange}\n            {...props}\n            style={inputStyle}\n            className={fieldClassName}\n          />\n          {IconFieldRight && (\n            <span className={css.inputIconRight}>{children}</span>\n          )}\n          {IconFieldLeft && (\n            <span className={css.inputIconLeft}>{children}</span>\n          )}\n        </label>\n      </div>\n    );\n  }\n\n  return (\n    <div className={css.formInput} style={divStyle}>\n      <label htmlFor={id} className={css.label} style={labelStyle}>\n        {label}\n      </label>\n      <input\n        id={id}\n        onChange={handleChange}\n        {...props}\n        style={inputStyle}\n        className={css.inputField}\n      />\n    </div>\n  );\n};\n\nexport default TextField;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["name","type","required","placeholder","email","password","_ref","onSubmit","_useState","useState","initialState","_useState2","_slicedToArray","user","setUser","_useState3","_useState4","passwordVisible","setPasswordVisible","handleChange","e","_e$target","target","value","prevUser","_objectSpread","_defineProperty","_jsx","className","css","children","_jsxs","preventDefault","length","toast","error","success","TextField","onChange","fields","IconFieldLeft","inputStyle","minWidth","Icon","id","h","w","f","sw","onClick","prevState","Button","text","buttonStyle","padding","fontSize","dispatch","useDispatch","RegisterForm","userData","fetchSignup","label","labelStyle","divStyle","IconFieldRight","props","_objectWithoutProperties","_excluded","useMemo","size","arguments","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","fieldClassName","concat","style","htmlFor"],"sourceRoot":""}