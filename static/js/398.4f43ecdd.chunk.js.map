{"version":3,"file":"static/js/398.4f43ecdd.chunk.js","mappings":"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","sources":["webpack://phonebook/./src/shared/Modal/Modal.module.scss?8d6b","shared/Modal/Modal.jsx","shared/Modal/index.js","shared/TextField/index.js","webpack://phonebook/./src/components/Contacts/EditContactForm/EditContactForm.module.scss?4b80","components/Contacts/EditContactForm/EditContactForm.jsx","webpack://phonebook/./src/components/Contacts/ContactsList/ContactsListItem/contactsListItem.module.scss?7b08","components/Contacts/ContactsList/ContactsListItem/ContactsListItem.jsx","webpack://phonebook/./src/components/Contacts/ContactsList/ContactsList.module.scss?35e8","components/Contacts/ContactsList/ContactsList.jsx","webpack://phonebook/./src/components/Contacts/ContactsFilter/ContactsFilter.module.scss?0ef4","components/Contacts/ContactsFilter/ContactsFilter.jsx","components/Contacts/ContactsForm/fields.js","webpack://phonebook/./src/components/Contacts/ContactsForm/ContactsForm.module.scss?ced7","components/Contacts/ContactsForm/ContactsForm.jsx","webpack://phonebook/./src/components/Contacts/Contacts.module.scss?4bb3","components/Contacts/Contacts.jsx","pages/ContactsPage.jsx","webpack://phonebook/./src/shared/TextField/TextField.module.scss?8ef0","shared/TextField/TextFiled.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Modal_container__wGhcF\",\"content\":\"Modal_content__YkcuB\"};","import { createPortal } from 'react-dom';\nimport css from './Modal.module.scss';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst Modal = ({ children, onClose, text1, text2 }) => {\n  return createPortal(\n    <div className={css.container}>\n      <div className={css.content}>{children}</div>\n    </div>,\n    modalRoot\n  );\n};\n\nexport default Modal;\n","import Modal from './Modal';\nexport default Modal;\n","import TextField from \"./TextFiled\";\nexport default TextField;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"EditContactForm_form__etEj4\",\"h2\":\"EditContactForm_h2__h38XF\",\"buttons\":\"EditContactForm_buttons__NvCHF\"};","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\n\nimport { fetchEditContact } from \"../../../redux/contacts/contacts-operations\";\nimport { selectContactById } from \"../../../redux/selectors\";\n\nimport Modal from \"../../../shared/Modal\";\nimport TextField from \"../../../shared/TextField\";\nimport Button from \"../../../shared/Button\";\n\nimport css from \"./EditContactForm.module.scss\";\n\nconst EditContactForm = ({ id, onClose }) => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const [isFormChanged, setIsFormChanged] = useState(false);\n  const dispatch = useDispatch();\n  const contactToEdit = useSelector((state) => selectContactById(state, id));\n\n  useEffect(() => {\n    setName(contactToEdit.name);\n    setNumber(contactToEdit.number);\n  }, [contactToEdit]);\n\n  const handleNameChange = (event) => {\n    setName(event.target.value);\n    setIsFormChanged(true);\n  };\n\n  const handlePhoneChange = (event) => {\n    setNumber(event.target.value);\n    setIsFormChanged(true);\n  };\n\n  const data = { name, number };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    dispatch(fetchEditContact({ id, data }));\n    toast.success(`${name} edited successfully!`);\n    onClose();\n  };\n  return (\n    <Modal onClose={onClose}>\n      <form onSubmit={handleSubmit} className={css.form}>\n        <h2 className={css.h2}>Edit Contact</h2>\n        <TextField\n          label=\"Name:\"\n          id=\"name\"\n          value={name}\n          type=\"text\"\n          onChange={handleNameChange}\n        />\n        <TextField\n          label=\"Phone:\"\n          id=\"number\"\n          value={number}\n          type=\"text\"\n          onChange={handlePhoneChange}\n        />\n        <div className={css.buttons}>\n          <Button\n            text=\"Save\"\n            hasIcon={true}\n            disabled={!isFormChanged}\n            buttonStyle={\n              !isFormChanged ? { opacity: 0.4, cursor: \"not-allowed\" } : {}\n            }\n          />\n          <Button text=\"Cancel\" hasIcon={true} onClick={onClose} />\n        </div>\n      </form>\n    </Modal>\n  );\n};\n\nexport default EditContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"li\":\"contactsListItem_li__MpFvv\"};","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { fetchDeleteContact } from \"../../../../redux/contacts/contacts-operations\";\n\nimport Icon from \"../../../../shared/Icon/Icon\";\nimport Button from \"../../../../shared/Button\";\nimport EditContactForm from \"../../EditContactForm/EditContactForm\";\n\nimport css from \"./contactsListItem.module.scss\";\n\nconst ContactsListItem = ({ id, name, number }) => {\n  const [showEditForm, setShowEditForm] = useState(false);\n  const [editContactId, setEditContactId] = useState(null);\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = (id) => {\n    dispatch(fetchDeleteContact(id));\n  };\n\n  const handleEditContact = (id) => {\n    setEditContactId(id);\n    setShowEditForm(true);\n  };\n\n  return (\n    <li className={css.li}>\n      <p className={css.p}>\n        {name}: {number}\n      </p>\n      <Button\n        onClick={() => handleDeleteContact(id)}\n        type=\"button\"\n        onlyIcon={true}\n        buttonStyle={{ marginLeft: \"auto\" }}\n      >\n        <Icon id=\"trash\" h=\"21\" w=\"21\" />\n      </Button>\n      <Button\n        onClick={() => handleEditContact(id)}\n        type=\"button\"\n        onlyIcon={true}\n        buttonStyle={{\n          marginLeft: \"5px\",\n        }}\n      >\n        <Icon id=\"edit\" h=\"20\" w=\"20\" />\n      </Button>\n      {showEditForm && (\n        <EditContactForm\n          id={editContactId}\n          onClose={() => setShowEditForm(false)}\n        />\n      )}\n    </li>\n  );\n};\n\nContactsListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactsListItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"ul\":\"ContactsList_ul__jITkL\"};","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { fetchAllContacts } from \"../../../redux/contacts/contacts-operations\";\nimport {\n  getAllContacts,\n  getFilter,\n  getFilteredContacts,\n} from \"../../../redux/selectors\";\n\nimport ContactsListItem from \"./ContactsListItem\";\n\nimport css from \"./ContactsList.module.scss\";\n\nconst ContactsList = () => {\n  const contacts = useSelector(getAllContacts);\n  const filter = useSelector(getFilter);\n  const filteredContacts = getFilteredContacts(filter, contacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  const allContacts = filteredContacts.map(({ id, name, number }) => (\n    <ContactsListItem key={id} id={id} name={name} number={number} />\n  ));\n  return <ul className={css.ul}>{allContacts}</ul>;\n};\n\nexport default ContactsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterBlock\":\"ContactsFilter_filterBlock__fNAUU\",\"h4\":\"ContactsFilter_h4__P0UUI\"};","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { setFilter } from \"../../../redux/filter/filter-slice\";\nimport { getFilter } from \"../../../redux/selectors\";\n\nimport TextField from \"../../../shared/TextField\";\n\nimport css from \"./ContactsFilter.module.scss\";\n\nconst ContactsFilter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const updateFilter = ({ target }) => {\n    const action = setFilter(target.value);\n    dispatch(action);\n  };\n\n  return (\n    <div className={css.filterBlock}>\n      <h4 className={css.h4}>Find contacts by name</h4>\n      <TextField\n        name=\"filter\"\n        onChange={updateFilter}\n        divStyle={{ flexDirection: \"column-reverse\" }}\n        placeholder=\"Type name...\"\n        type=\"text\"\n        value={filter}\n      ></TextField>\n    </div>\n  );\n};\n\nexport default ContactsFilter;\n","const fields = {\n  name: {\n    type: 'text',\n    name: 'name',\n    pattern: \"/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/\",\n    title:\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n    minLength: '1',\n    maxLength: '26',\n    required: true,\n    placeholder: 'Type name...',\n    label: 'Name',\n  },\n  number: {\n    type: 'tel',\n    name: 'number',\n    title:\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +: +1-123-456-7890',\n    minLength: '10',\n    maxLength: '17',\n    pattern: '/^+?d{1,3}[-.s]?d{1,3}[-.s]?d{1,4}[-.s]?d{1,4}[-.s]?d{1,9}$/',\n    required: true,\n    placeholder: 'Type number...',\n    label: 'Number',\n  },\n};\n\nexport default fields;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactsForm_form__RVOED\"};","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\n\nimport { fetchAddContact } from \"../../../redux/contacts/contacts-operations\";\nimport { getAllContacts } from \"../../../redux/selectors\";\n\nimport TextField from \"../../../shared/TextField\";\nimport Icon from \"../../../shared/Icon/Icon\";\nimport Button from \"../../../shared/Button\";\n\nimport fields from \"./fields\";\n\nimport css from \"./ContactsForm.module.scss\";\n\nconst ContactsForm = () => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getAllContacts);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (isAlreadyExists(name)) {\n      return toast.error(`${name} is already in your contacts!`);\n    }\n\n    dispatch(fetchAddContact({ name, number }));\n    toast.success(`${name} added successfully!`);\n    setName(\"\");\n    setNumber(\"\");\n    return;\n  };\n\n  const isAlreadyExists = (searchName) => {\n    if (\n      contacts.find((contact) => {\n        return contact.name.toLowerCase() === searchName.toLowerCase();\n      })\n    ) {\n      return true;\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className={css.form}>\n        <TextField\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n          value={name}\n          className={css.inputField}\n          {...fields.name}\n        />\n        <TextField\n          onChange={(event) => {\n            setNumber(event.target.value);\n          }}\n          value={number}\n          className={css.inputField}\n          {...fields.number}\n        />\n        <div>\n          <Button\n            text=\"Add contact\"\n            type=\"submit\"\n            hasIcon={true}\n            buttonStyle={{\n              padding: \"5px 8px\",\n              fontSize: \"16px\",\n              fontWeight: \"bold\",\n            }}\n          >\n            <Icon id=\"plus\" h=\"24\" w=\"24\" />\n          </Button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default ContactsForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"block\":\"Contacts_block__yq5IT\",\"wrapper\":\"Contacts_wrapper__UPwUc\",\"h\":\"Contacts_h__5mW41\"};","import React from \"react\";\n\nimport ContactsList from \"./ContactsList\";\nimport ContactsFilter from \"./ContactsFilter\";\nimport ContactsForm from \"./ContactsForm\";\n\nimport css from \"./Contacts.module.scss\";\n\nconst Contacts = () => {\n  return (\n    <section className={css.block}>\n      <div className={`${css.wrapper_phonebook} ${css.wrapper}`}>\n        <h2 className={css.h}>Phonebook</h2>\n        <ContactsForm />\n      </div>\n      <div className={`${css.wrapper_contacts} ${css.wrapper}`}>\n        <h2 className={css.h}>Contacts</h2>\n        <ContactsFilter />\n        <ContactsList />\n      </div>\n    </section>\n  );\n};\n\nexport default Contacts;\n","import React from \"react\";\nimport Contacts from \"../components/Contacts/Contacts\";\n\nconst ContactsPage = () => {\n  return (\n    <div>\n      <Contacts />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"formInput\":\"TextField_formInput__MhMqB\",\"iconLabel\":\"TextField_iconLabel__-odzf\",\"inputIconRight\":\"TextField_inputIconRight__Alp7+\",\"inputIconLeft\":\"TextField_inputIconLeft__aXH+3\",\"inputField\":\"TextField_inputField__az1oK\",\"label\":\"TextField_label__ApXO4\",\"inputIconFieldRight\":\"TextField_inputIconFieldRight__2IR0K\",\"inputIconFieldLeft\":\"TextField_inputIconFieldLeft__rFRC1\"};","import { nanoid } from 'nanoid';\nimport { useMemo } from 'react';\nimport css from './TextField.module.scss';\n\nconst TextField = ({\n  label,\n  handleChange,\n  labelStyle,\n  inputStyle,\n  divStyle,\n  IconFieldRight,\n  IconFieldLeft,\n  children,\n  ...props\n}) => {\n  const id = useMemo(() => nanoid(), []);\n\n  const fieldClassName = `${css.inputField} ${\n    IconFieldRight && css.inputIconFieldRight\n  } ${IconFieldLeft && css.inputIconFieldLeft}`;\n\n  if (IconFieldRight || IconFieldLeft) {\n    return (\n      <div className={css.formInput} style={divStyle}>\n        <label htmlFor={id} className={css.iconLabel}>\n          <input\n            id={id}\n            onChange={handleChange}\n            {...props}\n            style={inputStyle}\n            className={fieldClassName}\n          />\n          {IconFieldRight && (\n            <span className={css.inputIconRight}>{children}</span>\n          )}\n          {IconFieldLeft && (\n            <span className={css.inputIconLeft}>{children}</span>\n          )}\n        </label>\n      </div>\n    );\n  }\n\n  return (\n    <div className={css.formInput} style={divStyle}>\n      <label htmlFor={id} className={css.label} style={labelStyle}>\n        {label}\n      </label>\n      <input\n        id={id}\n        onChange={handleChange}\n        {...props}\n        style={inputStyle}\n        className={css.inputField}\n      />\n    </div>\n  );\n};\n\nexport default TextField;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["modalRoot","document","querySelector","_ref","children","onClose","text1","text2","createPortal","_jsx","className","css","id","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","_useState5","_useState6","isFormChanged","setIsFormChanged","dispatch","useDispatch","contactToEdit","useSelector","state","selectContactById","useEffect","data","Modal","_jsxs","onSubmit","event","preventDefault","fetchEditContact","toast","success","concat","TextField","label","value","type","onChange","target","Button","text","hasIcon","disabled","buttonStyle","opacity","cursor","onClick","showEditForm","setShowEditForm","editContactId","setEditContactId","li","p","fetchDeleteContact","handleDeleteContact","onlyIcon","marginLeft","Icon","h","w","handleEditContact","EditContactForm","contacts","getAllContacts","filter","getFilter","filteredContacts","getFilteredContacts","fetchAllContacts","allContacts","map","ContactsListItem","action","setFilter","divStyle","flexDirection","placeholder","pattern","title","minLength","maxLength","required","isAlreadyExists","searchName","find","contact","toLowerCase","error","fetchAddContact","form","_objectSpread","inputField","fields","padding","fontSize","fontWeight","block","wrapper_phonebook","wrapper","ContactsForm","wrapper_contacts","ContactsFilter","ContactsList","Contacts","handleChange","labelStyle","inputStyle","IconFieldRight","IconFieldLeft","props","_objectWithoutProperties","_excluded","useMemo","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","fieldClassName","style","htmlFor"],"sourceRoot":""}